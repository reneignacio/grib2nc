'<img style="display: block; margin-left: auto; margin-right: auto;" src="{base_url}_ANOMALIA_SAVI.png" alt="" width="1000" height="846" />',
'<img style="display: block; margin-left: auto; margin-right: auto;" src="{base_url}_DIFERENCIA_SAVI.png" alt="" width="1000" height="846" />'
)
return(html_template)
},
error = function(e) {
errores <<- c(errores, paste("Error en la región", region, ":", e$message))
},
warning = function(w) {
errores <<- c(errores, paste("Advertencia en la región", region, ":", w$message))
})
}
# Ciclo sobre las regiones para generar y guardar el código HTML
for (codigo in names(regiones)) {
region <- regiones[codigo]
# Generar el código HTML para la región
html_codigo <- generate_html(region, codigo)
# Guardar el código HTML en un archivo
html_file <- file(paste0("D:/Texto/HTML_SAVI_", region, ".txt"), "w")
writeLines(html_codigo, con = html_file, sep = "\n")
# Cerrar el archivo de texto
close(html_file)
}
#Mostrar los errores al final si hay alguno
if (length(errores) > 0) {
cat("Errores y/o advertencias encontrados:\n")
print(errores)
}
library(terra)
# 1. Cargar archivos
setwd("D:/soil_moisture/")
files <- list.files(path = "sm_activo/", full.names = TRUE, pattern = ".nc$")
all_sm <- rast(files, subds="sm")
# 2. Cargar y proyectar el shapefile de Chile
# Usando la ruta del shapefile correcta
chile <- vect("DPA_2023/REGIONES/REGIONES_v1.shp")
chile <- project(chile, "EPSG:4326")
# Usar disagg para aumentar la resolución
resampled_sm <- disagg(all_sm, fact=50, method="near")
# Usar la capa de Chile para enmascarar (mask) el raster
#soil_moisture <- mask(resampled_sm, chile)
soil_moisture <-crop(resampled_sm, chile,mask=TRUE)
# Calcular la media excluyendo los valores NA
mean_sm <- mean(soil_moisture, na.rm=TRUE)
# Visualizar y guardar
plot(mean_sm)
writeRaster(mean_sm, "soil_moisture_active_c3s_v2.tif", overwrite=TRUE)
#mean_sm<- rast("soil_moisture_active_c3s_v2.tif")
R13<-vect("DPA_2023/R13_sin.shp")
mean_sm <- mask(mean_sm, R13, inverse=TRUE)
for (i in 1:16) {
region_spatial <- chile[i,]
nombre_region <- chile$CUT_REG[i]
soil_moisture_regional <- crop(mean_sm, region_spatial, mask=TRUE)
plet(soil_moisture_regional,tiles="Streets")
# Crear directorios si no existen
main_dir <- paste0("C:/Users/Marcel/Desktop/mapas_boletin/mapas_boletin/data/R", chile$CUT_REG[i])
tif_dir <- paste0(main_dir, "/TIF")
sm_dir <- paste0(tif_dir, "/SOIL_MOISTURE")
dir.create(main_dir, showWarnings = FALSE)
dir.create(tif_dir, showWarnings = FALSE)
dir.create(sm_dir, showWarnings = FALSE)
# Guardar el raster
writeRaster(soil_moisture_regional, file.path(sm_dir, paste0("sm_R", nombre_region, ".tif")), overwrite=TRUE)
}
plet(soil_moisture_regional,tiles="Esri.WorldImagery")
list.files("G:\Unidades compartidas\Rene\Agromet")
list.files("G:/Unidades compartidas/Rene/Agromet")
for (estacion in estaciones) {
# Cargar los datos desde el archivo Excel
datos <- read_excel(estacion[1])
}
# Cargar los datos desde el archivo Excel
datos <- read_excel(estacion)
library(readxl)
library(writexl)
library(dplyr)
estacion<-list.files("G:/Unidades compartidas/Rene/Agromet")
estaciones<-list.files("G:/Unidades compartidas/Rene/Agromet")
for (estacion in estaciones) {
# Cargar los datos desde el archivo Excel
datos <- read_excel(estacion)
}
estaciones<-list.files("G:/Unidades compartidas/Rene/Agromet",full.names = T)
for (estacion in estaciones) {
# Cargar los datos desde el archivo Excel
datos <- read_excel(estacion)
}
datos
estaciones<-list.files("G:/Unidades compartidas/Rene/Agromet",full.names = T)
for (estacion in estaciones) {
# Cargar los datos desde el archivo Excel
datos <- read_excel(estacion)
}
estaciones<-list.files("G:/Unidades compartidas/Rene/Agromet",full.names = T)
for (estacion in estaciones) {
# Cargar los datos desde el archivo Excel
datos <- read_excel(estacion)
}
estaciones<-list.files("G:/Unidades compartidas/Rene/Agromet",full.names = T)
estaciones<-list.files("G:/Unidades compartidas/Rene/Agromet",full.names = T,pattern = "xlsx")
for (estacion in estaciones) {
# Cargar los datos desde el archivo Excel
datos <- read_excel(estacion)
}
datos
datos
estacion
library(readxl)
library(writexl)
library(dplyr)
# Función para limpiar los datos
limpiar_y_convertir <- function(x,nombre_estacion) {
if(is.character(x)) {
# Eliminar el carácter extraño y reemplazar punto por coma para los decimales
x <- gsub("‌", "", x) # Asegúrate de copiar el carácter entre las comillas desde tu conjunto de datos
x <- gsub("\\.", ",", x, fixed = TRUE)
}
return(x)
# Aplicar la función de limpieza a todas las columnas del dataframe
datos_limpios <- datos %>%
mutate(across(everything(), limpiar_y_convertir))
# Guardar los datos limpios en un nuevo archivo Excel
write_xlsx(datos_limpios, "ruta/a/tu/archivo/Cleaned_DatosHistoricos-Casablanca.xlsx")
}
estaciones<-list.files("G:/Unidades compartidas/Rene/Agromet",full.names = T,pattern = "xlsx")
for (estacion in estaciones) {
# Cargar los datos desde el archivo Excel
datos <- read_excel(estacion)
# Aplicar la función de limpieza a todas las columnas del dataframe
datos_limpios <- datos %>%
mutate(across(everything(), limpiar_y_convertir))
# Guardar los datos limpios en un nuevo archivo Excel
write_xlsx(datos_limpios, paste0(estacion,"_procesado.xlsx"))
}
library(readxl)
library(writexl)
library(dplyr)
# Función para limpiar los datos
limpiar_y_convertir <- function(x,nombre_estacion) {
if(is.character(x)) {
# Eliminar el carácter extraño y reemplazar punto por coma para los decimales
#x <- gsub("‌", "", x) # Asegúrate de copiar el carácter entre las comillas desde tu conjunto de datos
x <- gsub("\\.", ",", x, fixed = TRUE)
}
return(x)
# Aplicar la función de limpieza a todas las columnas del dataframe
datos_limpios <- datos %>%
mutate(across(everything(), limpiar_y_convertir))
# Guardar los datos limpios en un nuevo archivo Excel
write_xlsx(datos_limpios, "ruta/a/tu/archivo/Cleaned_DatosHistoricos-Casablanca.xlsx")
}
estaciones<-list.files("G:/Unidades compartidas/Rene/Agromet",full.names = T,pattern = "xlsx")
for (estacion in estaciones) {
# Cargar los datos desde el archivo Excel
datos <- read_excel(estacion)
# Aplicar la función de limpieza a todas las columnas del dataframe
datos_limpios <- datos %>%
mutate(across(everything(), limpiar_y_convertir))
# Guardar los datos limpios en un nuevo archivo Excel
write_xlsx(datos_limpios, paste0(estacion,"_procesado.xlsx"))
}
library(readxl)
library(writexl)
library(dplyr)
# Función para limpiar los datos
limpiar_y_convertir <- function(x,nombre_estacion) {
if(is.character(x)) {
# Eliminar el carácter extraño y reemplazar punto por coma para los decimales
#x <- gsub("‌", "", x) # Asegúrate de copiar el carácter entre las comillas desde tu conjunto de datos
x <- gsub("\\.", ",", x, fixed = TRUE)
}
return(x)
# Aplicar la función de limpieza a todas las columnas del dataframe
datos_limpios <- datos %>%
mutate(across(everything(), limpiar_y_convertir))
# Guardar los datos limpios en un nuevo archivo Excel
write_xlsx(datos_limpios, "ruta/a/tu/archivo/Cleaned_DatosHistoricos-Casablanca.xlsx")
}
estaciones<-list.files("G:/Unidades compartidas/Rene/Agromet",full.names = T,pattern = "xlsx")
for (estacion in estaciones) {
print(estacion)
# Cargar los datos desde el archivo Excel
datos <- read_excel(estacion)
# Aplicar la función de limpieza a todas las columnas del dataframe
datos_limpios <- datos %>%
mutate(across(everything(), limpiar_y_convertir))
# Guardar los datos limpios en un nuevo archivo Excel
write_xlsx(datos_limpios, paste0(estacion,"_procesado.xlsx"))
}
estaciones<-list.files("G:/Unidades compartidas/Rene/Agromet",full.names = T,pattern = "$.xlsx")
estaciones
estaciones<-list.files("G:/Unidades compartidas/Rene/Agromet",full.names = T,pattern = "//.xlsx")
estaciones
estaciones<-list.files("G:/Unidades compartidas/Rene/Agromet",full.names = T,pattern = "/.xlsx")
estaciones
estaciones<-list.files("G:/Unidades compartidas/Rene/Agromet",full.names = T,pattern = "$xlsx")
estaciones
estaciones<-list.files("G:/Unidades compartidas/Rene/Agromet",full.names = T,pattern = "\\.xlsx$")
estaciones
estacion
estaciones
estacion
basename(estacion)
library(readxl)
library(writexl)
library(dplyr)
# Función para limpiar los datos
limpiar_y_convertir <- function(x) {
if(is.character(x)) {
# Eliminar el carácter extraño y reemplazar punto por coma para los decimales
#x <- gsub("‌", "", x) # Asegúrate de copiar el carácter entre las comillas desde tu conjunto de datos
x <- gsub("\\.", ",", x, fixed = TRUE)
}
return(x)
}
estaciones<-list.files("G:/Unidades compartidas/Rene/Agromet",full.names = T,pattern = "\\.xlsx$")
for (estacion in estaciones) {
print(estacion)
datos <- read_excel(estacion)
# Aplicar la función de limpieza a todas las columnas del dataframe
datos_limpios <- datos %>%
mutate(across(everything(), limpiar_y_convertir))
write_xlsx(datos_limpios, paste0("G:/Unidades compartidas/Rene/Agromet/procesado/",basename(estacion))
}
paste0("G:/Unidades compartidas/Rene/Agromet/procesado/",basename(estacion)
a<-
a<- paste0("G:/Unidades compartidas/Rene/Agromet/procesado/",basename(estacion)
a
library(readxl)
library(writexl)
library(dplyr)
# Función para limpiar los datos
limpiar_y_convertir <- function(x) {
if(is.character(x)) {
# Eliminar el carácter extraño y reemplazar punto por coma para los decimales
#x <- gsub("‌", "", x) # Asegúrate de copiar el carácter entre las comillas desde tu conjunto de datos
x <- gsub("\\.", ",", x, fixed = TRUE)
}
return(x)
}
estaciones<-list.files("G:/Unidades compartidas/Rene/Agromet",full.names = T,pattern = "\\.xlsx$")
for (estacion in estaciones) {
print(estacion)
datos <- read_excel(estacion)
# Aplicar la función de limpieza a todas las columnas del dataframe
datos_limpios <- datos %>%
mutate(across(everything(), limpiar_y_convertir))
write_xlsx(datos_limpios, paste0("G:/Unidades compartidas/Rene/Agromet/procesado/",basename(estacion)))
}
library(readxl)
library(writexl)
library(dplyr)
# Función para limpiar los datos
limpiar_y_convertir <- function(x) {
if(is.character(x)) {
# Eliminar el carácter extraño y reemplazar punto por coma para los decimales
#x <- gsub("‌", "", x) # Asegúrate de copiar el carácter entre las comillas desde tu conjunto de datos
x <- gsub("\\.", ",", x, fixed = TRUE)
}
return(x)
}
estaciones<-list.files("G:/Unidades compartidas/Rene/Agromet",full.names = T,pattern = "\\.xlsx$")
for (estacion in estaciones) {
print(estacion)
datos <- read_excel(estacion)
# Aplicar la función de limpieza a todas las columnas del dataframe
datos_limpios <- datos %>%
mutate(across(everything(), limpiar_y_convertir))
write_xlsx(datos_limpios, paste0("G:/Unidades compartidas/Rene/Agromet/procesados/",basename(estacion)))
}
library(readxl)
library(writexl)
library(dplyr)
# Función para limpiar los datos
limpiar_y_convertir <- function(x) {
if(is.character(x)) {
# Verificar si el número contiene un punto antes de reemplazarlo
if(grepl("\\.", x)) {
x <- gsub("\\.", ",", x, fixed = TRUE)
}
}
return(x)
}
estaciones <- list.files("G:/Unidades compartidas/Rene/Agromet", full.names = TRUE, pattern = "\\.xlsx$")
for (estacion in estaciones) {
print(estacion)
datos <- read_excel(estacion)
# Aplicar la función de limpieza a todas las columnas del dataframe
datos_limpios <- datos %>%
mutate(across(everything(), limpiar_y_convertir))
# Construir el nombre del archivo de salida
nombre_salida <- paste0("G:/Unidades compartidas/Rene/Agromet/procesados/", tools::file_path_sans_ext(basename(estacion)), "_procesado.xlsx")
write_xlsx(datos_limpios, nombre_salida)
}
library(readxl)
library(writexl)
library(dplyr)
# Función para limpiar los datos
limpiar_y_convertir <- function(x) {
if(is.character(x)) {
# Verificar si el número contiene un punto antes de reemplazarlo
if(grepl("\\.", x)) {
x <- gsub("\\.", ",", x, fixed = TRUE)
}
}
return(x)
}
estaciones <- list.files("G:/Unidades compartidas/Rene/Agromet", full.names = TRUE, pattern = "\\.xlsx$")
for (estacion in estaciones) {
print(estacion)
datos <- read_excel(estacion)
# Aplicar la función de limpieza a todas las columnas del dataframe
datos_limpios <- datos %>%
mutate(across(everything(), limpiar_y_convertir))
write_xlsx(datos_limpios, paste0("G:/Unidades compartidas/Rene/Agromet/procesados/",basename(estacion)))
}
library(readxl)
library(writexl)
library(dplyr)
# Función para limpiar los datos
limpiar_y_convertir <- function(x) {
if(is.character(x)) {
# Verificar si el número contiene un punto antes de reemplazarlo
if(grepl("\\.", x)) {
x <- gsub("\\.", ",", x, fixed = TRUE)
}
}
return(x)
}
estaciones <- list.files("G:/Unidades compartidas/Rene/Agromet", full.names = TRUE, pattern = "\\.xlsx$")
for (estacion in estaciones) {
print(estacion)
datos <- read_excel(estacion)
# Aplicar la función de limpieza a todas las columnas del dataframe
datos_limpios <- datos %>%
mutate(across(everything(), limpiar_y_convertir))
# Construir el nombre del archivo de salida
nombre_salida <- paste0("G:/Unidades compartidas/Rene/Agromet/procesados/", tools::file_path_sans_ext(basename(estacion)), "_procesado.xlsx")
write_xlsx(datos_limpios, nombre_salida)
}
library(readxl)
library(writexl)
library(dplyr)
a
library(readxl)
library(writexl)
library(dplyr)
# Función ajustada para limpiar los datos
limpiar_y_convertir <- function(x) {
if(is.character(x)) {
# Reemplazar punto por coma solo si el número contiene un punto, usando ifelse que es vectorizado
x <- ifelse(grepl("\\.", x), gsub("\\.", ",", x, fixed = TRUE), x)
}
return(x)
}
estaciones <- list.files("G:/Unidades compartidas/Rene/Agromet", full.names = TRUE, pattern = "\\.xlsx$")
for (estacion in estaciones) {
print(estacion)
datos <- read_excel(estacion)
# Aplicar la función de limpieza a todas las columnas del dataframe
datos_limpios <- datos %>%
mutate(across(everything(), limpiar_y_convertir))
# Construir el nombre del archivo de salida
nombre_salida <- paste0("G:/Unidades compartidas/Rene/Agromet/procesados/", tools::file_path_sans_ext(basename(estacion)), "_procesado.xlsx")
write_xlsx(datos_limpios, nombre_salida)
}
library(readxl)
library(writexl)
library(dplyr)
# Función para limpiar los datos, incluyendo eliminación de caracteres extraños y cambio de punto por coma
limpiar_y_convertir <- function(x) {
if(is.character(x)) {
# Eliminar el carácter extraño
x <- gsub("‌", "", x, fixed = TRUE) # Asegúrate de copiar el carácter entre las comillas desde tu conjunto de datos
# Reemplazar punto por coma solo si el número contiene un punto, utilizando ifelse que es vectorizado
x <- ifelse(grepl("\\.", x), gsub("\\.", ",", x, fixed = TRUE), x)
}
return(x)
}
# Ruta a la carpeta con archivos Excel
ruta_origen <- "G:/Unidades compartidas/Rene/Agromet"
# Ruta a la carpeta donde se guardarán los archivos procesados
ruta_destino <- paste0(ruta_origen, "/procesados/")
# Obtener la lista de archivos Excel
estaciones <- list.files(ruta_origen, full.names = TRUE, pattern = "\\.xlsx$")
for (estacion in estaciones) {
print(paste("Procesando:", estacion))
datos <- read_excel(estacion)
# Aplicar la función de limpieza a todas las columnas del dataframe
datos_limpios <- datos %>%
mutate(across(everything(), limpiar_y_convertir))
# Construir el nombre del archivo de salida
nombre_salida <- paste0(ruta_destino, tools::file_path_sans_ext(basename(estacion)), "_procesado.xlsx")
# Guardar el archivo limpio
write_xlsx(datos_limpios, nombre_salida)
}
library(readxl)
library(writexl)
library(dplyr)
# Leer el archivo Excel tratando todo como texto
estaciones <- list.files("G:/Unidades compartidas/Rene/Agromet", full.names = TRUE, pattern = "\\.xlsx$")
for (estacion in estaciones) {
# Especificar que se lea cada columna como texto para evitar problemas de interpretación
tipos <- rep("text", length(read_excel(estacion, n_max = 1)))
datos <- read_excel(estacion, col_types = tipos)
# Identificar y eliminar el carácter extraño, luego reemplazar punto por coma
limpiar_y_convertir <- function(x) {
if(is.character(x)) {
# Eliminar caracteres extraños al inicio (ajustar según el caso)
x <- gsub("^‌", "", x, perl = TRUE) # Usa `^` para indicar inicio de la cadena
# Reemplazar punto por coma para los decimales
x <- gsub("\\.", ",", x, fixed = TRUE)
}
return(x)
}
datos_limpios <- datos %>%
mutate(across(everything(), limpiar_y_convertir))
# Guardar los datos limpios
nombre_salida <- paste0("G:/Unidades compartidas/Rene/Agromet/procesados/", tools::file_path_sans_ext(basename(estacion)), "_procesado.xlsx")
write_xlsx(datos_limpios, nombre_salida)
}
library(readxl)
library(writexl)
library(dplyr)
library(stringr)
# Función para limpiar los datos
limpiar_y_convertir <- function(x) {
x <- str_replace_all(x, "‌", "") # Eliminar carácter extraño
x <- str_replace_all(x, "\\.", ",") # Cambiar puntos por comas
return(x)
}
estaciones <- list.files("G:/Unidades compartidas/Rene/Agromet", full.names = TRUE, pattern = "\\.xlsx$")
for (estacion in estaciones) {
print(estacion)
datos <- read_excel(estacion, col_types = rep("text", length = excel_sheets(estacion)))
# Aplicar la función de limpieza a todas las columnas del dataframe
datos_limpios <- datos %>%
mutate(across(everything(), limpiar_y_convertir))
nombre_salida <- paste0("G:/Unidades compartidas/Rene/Agromet/procesados/", tools::file_path_sans_ext(basename(estacion)), "_procesado.xlsx")
write_xlsx(datos_limpios, nombre_salida)
}
library(readxl)
library(writexl)
library(dplyr)
library(stringr)
# Función para limpiar los datos
limpiar_y_convertir <- function(x) {
#x <- str_replace_all(x, "‌", "") # Eliminar carácter extraño
x <- str_replace_all(x, "\\.", ",") # Cambiar puntos por comas
return(x)
}
estaciones <- list.files("G:/Unidades compartidas/Rene/Agromet", full.names = TRUE, pattern = "\\.xlsx$")
for (estacion in estaciones) {
print(estacion)
datos <- read_excel(estacion, col_types = rep("text", length = excel_sheets(estacion)))
# Aplicar la función de limpieza a todas las columnas del dataframe
datos_limpios <- datos %>%
mutate(across(everything(), limpiar_y_convertir))
nombre_salida <- paste0("G:/Unidades compartidas/Rene/Agromet/procesados/", tools::file_path_sans_ext(basename(estacion)), "_procesado.xlsx")
write_xlsx(datos_limpios, nombre_salida)
}
library(readxl)
library(writexl)
library(dplyr)
library(stringr)
# Función para limpiar los datos
limpiar_y_convertir <- function(x) {
#x <- str_replace_all(x, "‌", "") # Eliminar carácter extraño
x <- str_replace_all(x, "\\.", ",") # Cambiar puntos por comas
return(x)
}
estaciones <- list.files("G:/Unidades compartidas/Rene/Agromet", full.names = TRUE, pattern = "\\.xlsx$")
for (estacion in estaciones) {
print(estacion)
datos <- read_excel(estacion, col_types = rep("text", length = excel_sheets(estacion)))
# Aplicar la función de limpieza a todas las columnas del dataframe
datos_limpios <- datos %>%
mutate(across(everything(), limpiar_y_convertir))
write_xlsx(datos_limpios, paste0("G:/Unidades compartidas/Rene/Agromet/procesados/",basename(estacion)))
}
library(readxl)
library(writexl)
library(dplyr)
library(stringr)
# Función para limpiar los datos
limpiar_y_convertir <- function(x) {
#x <- str_replace_all(x, "‌", "") # Eliminar carácter extraño
x <- str_replace_all(x, "\\.", ",") # Cambiar puntos por comas
return(x)
}
estaciones <- list.files("G:/Unidades compartidas/Rene/Agromet", full.names = TRUE, pattern = "\\.xlsx$")
for (estacion in estaciones) {
print(estacion)
datos <- read_excel(estacion, col_types = rep("text", length = excel_sheets(estacion)))
# Aplicar la función de limpieza a todas las columnas del dataframe
datos_limpios <- datos %>%
mutate(across(everything(), limpiar_y_convertir))
write_xlsx(datos_limpios, paste0("G:/Unidades compartidas/Rene/Agromet/procesados/",basename(estacion)))
}
devtools::document()
devtools::build()
devtools::install()
filtrar_archivos_por_variable <- function(path, variable) {
archivos <- list.files(path, full.names = TRUE)
archivos_filtrados <- archivos[grep(variable, archivos)]
return(archivos_filtrados)
}
# CAPE_ML - T_2M - TMAX_2M - TMIN_2M - TOT_PREC - WW
dir<-"D:/INIA/ICON/prueba_2/18/NetCDF"
temp_files <- filtrar_archivos_por_variable(dir, "T_2M")
temp_files
